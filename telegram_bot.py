import os
import aiomysql
import pandas as pd
import asyncio
from datetime import datetime
from telegram import (
    Bot,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
API_TOKEN = "7810266531:AAHbcd_YNWiCIRZwCVxqc0D2AdphHhkJkBY"
DB_CONFIG = {
    'host': 'localhost',
    'user': 'websen9w_parser',
    'password': 'FAwooxqZj!B8',
    'db': 'websen9w_parser',
    'charset': 'utf8mb4',
}

bot = Bot(token=API_TOKEN)
app = ApplicationBuilder().token(API_TOKEN).build()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üì§ –≠–∫—Å–ø–æ—Ä—Ç –ë–î –≤ Excel"],
        ["üîç –ü–æ–∏—Å–∫ –ø–æ –ë–î"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Excel
async def export_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    filename = f"Database_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx"
    progress_msg = await context.bot.send_message(chat_id, "üì¶ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ aiomysql
    try:
        pool = await aiomysql.create_pool(**DB_CONFIG, autocommit=True, minsize=1, maxsize=100)
    except Exception as e:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=progress_msg.message_id,
            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}"
        )
        return

    try:
        async with pool.acquire() as conn:
            async with conn.cursor(aiomysql.DictCursor) as cursor:
                query = "SELECT * FROM documents"
                await cursor.execute(query)
                rows = await cursor.fetchall()
                df = pd.DataFrame(rows)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        df.rename(columns={
            'document_type': '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
            'registration_number': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä',
            'valid_from': '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å',
            'valid_to': '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø–æ',
            'certification_body': '–û—Ä–≥–∞–Ω –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            'applicant': '–ó–∞—è–≤–∏—Ç–µ–ª—å',
            'manufacturer': '–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å',
            'product': '–ü—Ä–æ–¥—É–∫—Ü–∏—è',
            'tn_ved_code': '–ö–æ–¥ –¢–ù –í–≠–î',
            'compliance_requirements': '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
            'certificate_based_on': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏',
            'additional_info': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            'issue_date': '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)',
            'last_change_reason_status': '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å',
            'shipping_documents': '–û—Ç–≥—Ä—É–∑–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
        }, inplace=True)

        # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        df = df[[
            '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä',
            '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å',
            '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø–æ',
            '–û—Ä–≥–∞–Ω –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
            '–ó–∞—è–≤–∏—Ç–µ–ª—å',
            '–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å',
            '–ü—Ä–æ–¥—É–∫—Ü–∏—è',
            '–ö–æ–¥ –¢–ù –í–≠–î',
            '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
            '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏',
            '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)',
            '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å',
            '–û—Ç–≥—Ä—É–∑–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
        ]]

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞')
            worksheet = writer.sheets['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞']

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            max_width = 100
            for column_cells in worksheet.columns:
                length = max(len(str(cell.value) if cell.value else "") for cell in column_cells)
                length = min(length, max_width)
                column_letter = column_cells[0].column_letter
                worksheet.column_dimensions[column_letter].width = length + 2

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            date_format = 'DD.MM.YYYY'
            date_columns = ['–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å', '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø–æ', '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)']
            for col_name in date_columns:
                if col_name in df.columns:
                    col_idx = df.columns.get_loc(col_name) + 1
                    for row_idx in range(2, len(df) + 2):
                        cell = worksheet.cell(row=row_idx, column=col_idx)
                        cell.number_format = date_format

        await context.bot.send_document(chat_id, document=open(filename, 'rb'))
        os.remove(filename)
        await context.bot.edit_message_text(chat_id=chat_id, message_id=progress_msg.message_id, text="‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=progress_msg.message_id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}"
        )
    finally:
        pool.close()
        await pool.wait_closed()

# –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def search_db_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    await context.bot.send_message(chat_id, "üîç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")

async def search_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    search_input = update.message.text.strip()
    if not search_input:
        await context.bot.send_message(chat_id, "‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    try:
        pool = await aiomysql.create_pool(**DB_CONFIG, autocommit=True, minsize=1, maxsize=100)
    except Exception as e:
        await context.bot.send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    try:
        async with pool.acquire() as conn:
            async with conn.cursor(aiomysql.DictCursor) as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ
                match = re.match(r'(\w+):\s*(.+)', search_input)
                if match:
                    field_alias, search_query = match.groups()
                    field_mapping = {
                        '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞': 'document_type',
                        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä': 'registration_number',
                        '–û—Ä–≥–∞–Ω –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏': 'certification_body',
                        '–ó–∞—è–≤–∏—Ç–µ–ª—å': 'applicant',
                        '–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å': 'manufacturer',
                        '–ü—Ä–æ–¥—É–∫—Ü–∏—è': 'product',
                        '–ö–æ–¥ –¢–ù –í–≠–î': 'tn_ved_code',
                        '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º': 'compliance_requirements',
                        '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏': 'certificate_based_on',
                        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è': 'additional_info',
                        '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å': 'last_change_reason_status',
                        '–û—Ç–≥—Ä—É–∑–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã': 'shipping_documents'
                    }
                    field = field_mapping.get(field_alias)
                    if field:
                        query = f"SELECT * FROM documents WHERE {field} LIKE %s"
                        params = ('%' + search_query + '%',)
                    else:
                        await context.bot.send_message(chat_id, f"‚ùå –ü–æ–ª–µ '{field_alias}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è.")
                        return
                else:
                    # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º
                    search_query = search_input
                    search_columns = [
                        'document_type',
                        'registration_number',
                        'certification_body',
                        'applicant',
                        'manufacturer',
                        'product',
                        'tn_ved_code',
                        'compliance_requirements',
                        'certificate_based_on',
                        'additional_info',
                        'last_change_reason_status',
                        'shipping_documents'
                    ]
                    where_clause = " OR ".join([f"{col} LIKE %s" for col in search_columns])
                    params = ['%' + search_query + '%'] * len(search_columns)
                    query = f"SELECT * FROM documents WHERE {where_clause}"
                await cursor.execute(query, params)
                results = await cursor.fetchall()

                if results:
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ–º–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    if len(results) <= 5:
                        for result in results:
                            message = (
                                f"üìÑ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:</b>\n\n"
                                f"<b>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b> {result['document_type']}\n"
                                f"<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:</b> {result['registration_number']}\n"
                                f"<b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å:</b> {result['valid_from']}\n"
                                f"<b>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø–æ:</b> {result['valid_to']}\n"
                                f"<b>–û—Ä–≥–∞–Ω –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:</b> {result['certification_body']}\n"
                                f"<b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {result['applicant']}\n"
                                f"<b>–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å:</b> {result['manufacturer']}\n"
                                f"<b>–ü—Ä–æ–¥—É–∫—Ü–∏—è:</b> {result['product']}\n"
                                f"<b>–ö–æ–¥ –¢–ù –í–≠–î:</b> {result['tn_ved_code']}\n"
                                f"<b>–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:</b> {result['compliance_requirements']}\n"
                                f"<b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏:</b> {result['certificate_based_on']}\n"
                                f"<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {result['additional_info']}\n"
                                f"<b>–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏):</b> {result['issue_date']}\n"
                                f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å:</b> {result['last_change_reason_status']}\n"
                                f"<b>–û—Ç–≥—Ä—É–∑–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:</b> {result['shipping_documents']}\n"
                            )
                            await context.bot.send_message(chat_id, message, parse_mode="HTML")
                    else:
                        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª Excel
                        df = pd.DataFrame(results)
                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
                        df.rename(columns={
                            'document_type': '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
                            'registration_number': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä',
                            'valid_from': '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å',
                            'valid_to': '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø–æ',
                            'certification_body': '–û—Ä–≥–∞–Ω –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                            'applicant': '–ó–∞—è–≤–∏—Ç–µ–ª—å',
                            'manufacturer': '–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å',
                            'product': '–ü—Ä–æ–¥—É–∫—Ü–∏—è',
                            'tn_ved_code': '–ö–æ–¥ –¢–ù –í–≠–î',
                            'compliance_requirements': '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
                            'certificate_based_on': '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏',
                            'additional_info': '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                            'issue_date': '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)',
                            'last_change_reason_status': '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å',
                            'shipping_documents': '–û—Ç–≥—Ä—É–∑–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
                        }, inplace=True)
                        # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
                        df = df[[
                            '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
                            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä',
                            '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å',
                            '–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –ø–æ',
                            '–û—Ä–≥–∞–Ω –ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
                            '–ó–∞—è–≤–∏—Ç–µ–ª—å',
                            '–ò–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å',
                            '–ü—Ä–æ–¥—É–∫—Ü–∏—è',
                            '–ö–æ–¥ –¢–ù –í–≠–î',
                            '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º',
                            '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏',
                            '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                            '–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)',
                            '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å',
                            '–û—Ç–≥—Ä—É–∑–æ—á–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
                        ]]
                        filename = f"Search_Results_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx"
                        with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                            df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞')
                            worksheet = writer.sheets['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞']
                            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
                            max_width = 100
                            for column_cells in worksheet.columns:
                                length = max(len(str(cell.value) if cell.value else "") for cell in column_cells)
                                length = min(length, max_width)
                                column_letter = column_cells[0].column_letter
                                worksheet.column_dimensions[column_letter].width = length + 2
                        await context.bot.send_document(chat_id, document=open(filename, 'rb'))
                        os.remove(filename)
                else:
                    await context.bot.send_message(chat_id, "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    finally:
        pool.close()
        await pool.wait_closed()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("export_db", export_db))
app.add_handler(CommandHandler("search", search_db_prompt))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
app.add_handler(MessageHandler(filters.Regex("üì§ –≠–∫—Å–ø–æ—Ä—Ç –ë–î –≤ Excel"), export_db))
app.add_handler(MessageHandler(filters.Regex("üîç –ü–æ–∏—Å–∫ –ø–æ –ë–î"), search_db_prompt))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ URL
app.add_handler(MessageHandler(
    filters.TEXT & filters.ChatType.PRIVATE & ~filters.COMMAND & ~filters.Regex(r'https?://\S+'),
    search_db
))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    app.run_polling()
